
Test_q.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005f4  080005fc  000105fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005f4  080005f4  000105fc  2**0
                  CONTENTS
  4 .ARM          00000000  080005f4  080005f4  000105fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005f4  080005fc  000105fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005f4  080005f4  000105f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005f8  080005f8  000105f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080005fc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080005fc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001748  00000000  00000000  00010625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000070b  00000000  00000000  00011d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00012478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f8  00000000  00000000  000126b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009316  00000000  00000000  000128b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ff9  00000000  00000000  0001bbc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00037217  00000000  00000000  0001dbbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00054dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008b4  00000000  00000000  00054e2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080005dc 	.word	0x080005dc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080005dc 	.word	0x080005dc

08000170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000174:	4b15      	ldr	r3, [pc, #84]	; (80001cc <SystemInit+0x5c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a14      	ldr	r2, [pc, #80]	; (80001cc <SystemInit+0x5c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000180:	4b12      	ldr	r3, [pc, #72]	; (80001cc <SystemInit+0x5c>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	4911      	ldr	r1, [pc, #68]	; (80001cc <SystemInit+0x5c>)
 8000186:	4b12      	ldr	r3, [pc, #72]	; (80001d0 <SystemInit+0x60>)
 8000188:	4013      	ands	r3, r2
 800018a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800018c:	4b0f      	ldr	r3, [pc, #60]	; (80001cc <SystemInit+0x5c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a0e      	ldr	r2, [pc, #56]	; (80001cc <SystemInit+0x5c>)
 8000192:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800019a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800019c:	4b0b      	ldr	r3, [pc, #44]	; (80001cc <SystemInit+0x5c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	4a0a      	ldr	r2, [pc, #40]	; (80001cc <SystemInit+0x5c>)
 80001a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80001a6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001a8:	4b08      	ldr	r3, [pc, #32]	; (80001cc <SystemInit+0x5c>)
 80001aa:	685b      	ldr	r3, [r3, #4]
 80001ac:	4a07      	ldr	r2, [pc, #28]	; (80001cc <SystemInit+0x5c>)
 80001ae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80001b2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001b4:	4b05      	ldr	r3, [pc, #20]	; (80001cc <SystemInit+0x5c>)
 80001b6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80001bc:	f000 f80c 	bl	80001d8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <SystemInit+0x64>)
 80001c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001c6:	609a      	str	r2, [r3, #8]
#endif 
}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	40021000 	.word	0x40021000
 80001d0:	f8ff0000 	.word	0xf8ff0000
 80001d4:	e000ed00 	.word	0xe000ed00

080001d8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80001dc:	f000 f802 	bl	80001e4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80001e0:	bf00      	nop
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001f2:	4b3a      	ldr	r3, [pc, #232]	; (80002dc <SetSysClockTo72+0xf8>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a39      	ldr	r2, [pc, #228]	; (80002dc <SetSysClockTo72+0xf8>)
 80001f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001fc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001fe:	4b37      	ldr	r3, [pc, #220]	; (80002dc <SetSysClockTo72+0xf8>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000206:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	3301      	adds	r3, #1
 800020c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d103      	bne.n	800021c <SetSysClockTo72+0x38>
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800021a:	d1f0      	bne.n	80001fe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800021c:	4b2f      	ldr	r3, [pc, #188]	; (80002dc <SetSysClockTo72+0xf8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000224:	2b00      	cmp	r3, #0
 8000226:	d002      	beq.n	800022e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000228:	2301      	movs	r3, #1
 800022a:	603b      	str	r3, [r7, #0]
 800022c:	e001      	b.n	8000232 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800022e:	2300      	movs	r3, #0
 8000230:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	2b01      	cmp	r3, #1
 8000236:	d14b      	bne.n	80002d0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000238:	4b29      	ldr	r3, [pc, #164]	; (80002e0 <SetSysClockTo72+0xfc>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a28      	ldr	r2, [pc, #160]	; (80002e0 <SetSysClockTo72+0xfc>)
 800023e:	f043 0310 	orr.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000244:	4b26      	ldr	r3, [pc, #152]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a25      	ldr	r2, [pc, #148]	; (80002e0 <SetSysClockTo72+0xfc>)
 800024a:	f023 0307 	bic.w	r3, r3, #7
 800024e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000250:	4b23      	ldr	r3, [pc, #140]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a22      	ldr	r2, [pc, #136]	; (80002e0 <SetSysClockTo72+0xfc>)
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <SetSysClockTo72+0xf8>)
 800025e:	4a1f      	ldr	r2, [pc, #124]	; (80002dc <SetSysClockTo72+0xf8>)
 8000260:	685b      	ldr	r3, [r3, #4]
 8000262:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000264:	4b1d      	ldr	r3, [pc, #116]	; (80002dc <SetSysClockTo72+0xf8>)
 8000266:	4a1d      	ldr	r2, [pc, #116]	; (80002dc <SetSysClockTo72+0xf8>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800026c:	4b1b      	ldr	r3, [pc, #108]	; (80002dc <SetSysClockTo72+0xf8>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a1a      	ldr	r2, [pc, #104]	; (80002dc <SetSysClockTo72+0xf8>)
 8000272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000276:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <SetSysClockTo72+0xf8>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a17      	ldr	r2, [pc, #92]	; (80002dc <SetSysClockTo72+0xf8>)
 800027e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000282:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <SetSysClockTo72+0xf8>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a14      	ldr	r2, [pc, #80]	; (80002dc <SetSysClockTo72+0xf8>)
 800028a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800028e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <SetSysClockTo72+0xf8>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <SetSysClockTo72+0xf8>)
 8000296:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800029a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800029c:	bf00      	nop
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <SetSysClockTo72+0xf8>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d0f9      	beq.n	800029e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SetSysClockTo72+0xf8>)
 80002ac:	685b      	ldr	r3, [r3, #4]
 80002ae:	4a0b      	ldr	r2, [pc, #44]	; (80002dc <SetSysClockTo72+0xf8>)
 80002b0:	f023 0303 	bic.w	r3, r3, #3
 80002b4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80002b6:	4b09      	ldr	r3, [pc, #36]	; (80002dc <SetSysClockTo72+0xf8>)
 80002b8:	685b      	ldr	r3, [r3, #4]
 80002ba:	4a08      	ldr	r2, [pc, #32]	; (80002dc <SetSysClockTo72+0xf8>)
 80002bc:	f043 0302 	orr.w	r3, r3, #2
 80002c0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <SetSysClockTo72+0xf8>)
 80002c6:	685b      	ldr	r3, [r3, #4]
 80002c8:	f003 030c 	and.w	r3, r3, #12
 80002cc:	2b08      	cmp	r3, #8
 80002ce:	d1f9      	bne.n	80002c4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40021000 	.word	0x40021000
 80002e0:	40022000 	.word	0x40022000

080002e4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b089      	sub	sp, #36	; 0x24
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80002ee:	2300      	movs	r3, #0
 80002f0:	61fb      	str	r3, [r7, #28]
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80002fe:	2300      	movs	r3, #0
 8000300:	617b      	str	r3, [r7, #20]
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	78db      	ldrb	r3, [r3, #3]
 800030a:	f003 030f 	and.w	r3, r3, #15
 800030e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000310:	683b      	ldr	r3, [r7, #0]
 8000312:	78db      	ldrb	r3, [r3, #3]
 8000314:	f003 0310 	and.w	r3, r3, #16
 8000318:	2b00      	cmp	r3, #0
 800031a:	d005      	beq.n	8000328 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	789b      	ldrb	r3, [r3, #2]
 8000320:	461a      	mov	r2, r3
 8000322:	69fb      	ldr	r3, [r7, #28]
 8000324:	4313      	orrs	r3, r2
 8000326:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	881b      	ldrh	r3, [r3, #0]
 800032c:	b2db      	uxtb	r3, r3
 800032e:	2b00      	cmp	r3, #0
 8000330:	d044      	beq.n	80003bc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
 800033c:	e038      	b.n	80003b0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800033e:	2201      	movs	r2, #1
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	881b      	ldrh	r3, [r3, #0]
 800034c:	461a      	mov	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	4013      	ands	r3, r2
 8000352:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000354:	693a      	ldr	r2, [r7, #16]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	429a      	cmp	r2, r3
 800035a:	d126      	bne.n	80003aa <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800035c:	69bb      	ldr	r3, [r7, #24]
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000362:	220f      	movs	r2, #15
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	fa02 f303 	lsl.w	r3, r2, r3
 800036a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	43db      	mvns	r3, r3
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	4013      	ands	r3, r2
 8000374:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000376:	69fa      	ldr	r2, [r7, #28]
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	fa02 f303 	lsl.w	r3, r2, r3
 800037e:	697a      	ldr	r2, [r7, #20]
 8000380:	4313      	orrs	r3, r2
 8000382:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000384:	683b      	ldr	r3, [r7, #0]
 8000386:	78db      	ldrb	r3, [r3, #3]
 8000388:	2b28      	cmp	r3, #40	; 0x28
 800038a:	d105      	bne.n	8000398 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800038c:	2201      	movs	r2, #1
 800038e:	69bb      	ldr	r3, [r7, #24]
 8000390:	409a      	lsls	r2, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	615a      	str	r2, [r3, #20]
 8000396:	e008      	b.n	80003aa <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	78db      	ldrb	r3, [r3, #3]
 800039c:	2b48      	cmp	r3, #72	; 0x48
 800039e:	d104      	bne.n	80003aa <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80003a0:	2201      	movs	r2, #1
 80003a2:	69bb      	ldr	r3, [r7, #24]
 80003a4:	409a      	lsls	r2, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003aa:	69bb      	ldr	r3, [r7, #24]
 80003ac:	3301      	adds	r3, #1
 80003ae:	61bb      	str	r3, [r7, #24]
 80003b0:	69bb      	ldr	r3, [r7, #24]
 80003b2:	2b07      	cmp	r3, #7
 80003b4:	d9c3      	bls.n	800033e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003bc:	683b      	ldr	r3, [r7, #0]
 80003be:	881b      	ldrh	r3, [r3, #0]
 80003c0:	2bff      	cmp	r3, #255	; 0xff
 80003c2:	d946      	bls.n	8000452 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ca:	2300      	movs	r3, #0
 80003cc:	61bb      	str	r3, [r7, #24]
 80003ce:	e03a      	b.n	8000446 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	3308      	adds	r3, #8
 80003d4:	2201      	movs	r2, #1
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	881b      	ldrh	r3, [r3, #0]
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	4013      	ands	r3, r2
 80003e6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d127      	bne.n	8000440 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003f6:	220f      	movs	r2, #15
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000400:	68bb      	ldr	r3, [r7, #8]
 8000402:	43db      	mvns	r3, r3
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	4013      	ands	r3, r2
 8000408:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800040a:	69fa      	ldr	r2, [r7, #28]
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	fa02 f303 	lsl.w	r3, r2, r3
 8000412:	697a      	ldr	r2, [r7, #20]
 8000414:	4313      	orrs	r3, r2
 8000416:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	78db      	ldrb	r3, [r3, #3]
 800041c:	2b28      	cmp	r3, #40	; 0x28
 800041e:	d105      	bne.n	800042c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000420:	69bb      	ldr	r3, [r7, #24]
 8000422:	3308      	adds	r3, #8
 8000424:	2201      	movs	r2, #1
 8000426:	409a      	lsls	r2, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800042c:	683b      	ldr	r3, [r7, #0]
 800042e:	78db      	ldrb	r3, [r3, #3]
 8000430:	2b48      	cmp	r3, #72	; 0x48
 8000432:	d105      	bne.n	8000440 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000434:	69bb      	ldr	r3, [r7, #24]
 8000436:	3308      	adds	r3, #8
 8000438:	2201      	movs	r2, #1
 800043a:	409a      	lsls	r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	3301      	adds	r3, #1
 8000444:	61bb      	str	r3, [r7, #24]
 8000446:	69bb      	ldr	r3, [r7, #24]
 8000448:	2b07      	cmp	r3, #7
 800044a:	d9c1      	bls.n	80003d0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	605a      	str	r2, [r3, #4]
  }
}
 8000452:	bf00      	nop
 8000454:	3724      	adds	r7, #36	; 0x24
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	460b      	mov	r3, r1
 8000466:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000468:	78fb      	ldrb	r3, [r7, #3]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d006      	beq.n	800047c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800046e:	4b09      	ldr	r3, [pc, #36]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000470:	699a      	ldr	r2, [r3, #24]
 8000472:	4908      	ldr	r1, [pc, #32]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4313      	orrs	r3, r2
 8000478:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800047a:	e006      	b.n	800048a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	43db      	mvns	r3, r3
 8000484:	4903      	ldr	r1, [pc, #12]	; (8000494 <RCC_APB2PeriphClockCmd+0x38>)
 8000486:	4013      	ands	r3, r2
 8000488:	618b      	str	r3, [r1, #24]
}
 800048a:	bf00      	nop
 800048c:	370c      	adds	r7, #12
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr
 8000494:	40021000 	.word	0x40021000

08000498 <main>:
  * @brief  Main program.
  * @param  None
  * @retval None
  */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f10x.c file
     */

  /* GPIOD Periph clock enable */
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 800049c:	2101      	movs	r1, #1
 800049e:	2020      	movs	r0, #32
 80004a0:	f7ff ffdc 	bl	800045c <RCC_APB2PeriphClockCmd>

  /* Configure PD0 and PD2 in output pushpull mode */
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_2;
 80004a4:	4b24      	ldr	r3, [pc, #144]	; (8000538 <main+0xa0>)
 80004a6:	2205      	movs	r2, #5
 80004a8:	801a      	strh	r2, [r3, #0]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004aa:	4b23      	ldr	r3, [pc, #140]	; (8000538 <main+0xa0>)
 80004ac:	2203      	movs	r2, #3
 80004ae:	709a      	strb	r2, [r3, #2]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80004b0:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0xa0>)
 80004b2:	2210      	movs	r2, #16
 80004b4:	70da      	strb	r2, [r3, #3]
  GPIO_Init(GPIOD, &GPIO_InitStructure);
 80004b6:	4920      	ldr	r1, [pc, #128]	; (8000538 <main+0xa0>)
 80004b8:	4820      	ldr	r0, [pc, #128]	; (800053c <main+0xa4>)
 80004ba:	f7ff ff13 	bl	80002e4 <GPIO_Init>
     cycles to minimize more the infinite loop timing.
     This code needs to be compiled with high speed optimization option.  */
  while (1)
  {
    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004be:	4b1f      	ldr	r3, [pc, #124]	; (800053c <main+0xa4>)
 80004c0:	2205      	movs	r2, #5
 80004c2:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 80004c4:	4b1d      	ldr	r3, [pc, #116]	; (800053c <main+0xa4>)
 80004c6:	2205      	movs	r2, #5
 80004c8:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004ca:	4b1c      	ldr	r3, [pc, #112]	; (800053c <main+0xa4>)
 80004cc:	2205      	movs	r2, #5
 80004ce:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 80004d0:	4b1a      	ldr	r3, [pc, #104]	; (800053c <main+0xa4>)
 80004d2:	2205      	movs	r2, #5
 80004d4:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004d6:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0xa4>)
 80004d8:	2205      	movs	r2, #5
 80004da:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0xa4>)
 80004de:	2205      	movs	r2, #5
 80004e0:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004e2:	4b16      	ldr	r3, [pc, #88]	; (800053c <main+0xa4>)
 80004e4:	2205      	movs	r2, #5
 80004e6:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 80004e8:	4b14      	ldr	r3, [pc, #80]	; (800053c <main+0xa4>)
 80004ea:	2205      	movs	r2, #5
 80004ec:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004ee:	4b13      	ldr	r3, [pc, #76]	; (800053c <main+0xa4>)
 80004f0:	2205      	movs	r2, #5
 80004f2:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 80004f4:	4b11      	ldr	r3, [pc, #68]	; (800053c <main+0xa4>)
 80004f6:	2205      	movs	r2, #5
 80004f8:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 80004fa:	4b10      	ldr	r3, [pc, #64]	; (800053c <main+0xa4>)
 80004fc:	2205      	movs	r2, #5
 80004fe:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 8000500:	4b0e      	ldr	r3, [pc, #56]	; (800053c <main+0xa4>)
 8000502:	2205      	movs	r2, #5
 8000504:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0xa4>)
 8000508:	2205      	movs	r2, #5
 800050a:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0xa4>)
 800050e:	2205      	movs	r2, #5
 8000510:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0xa4>)
 8000514:	2205      	movs	r2, #5
 8000516:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <main+0xa4>)
 800051a:	2205      	movs	r2, #5
 800051c:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <main+0xa4>)
 8000520:	2205      	movs	r2, #5
 8000522:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <main+0xa4>)
 8000526:	2205      	movs	r2, #5
 8000528:	615a      	str	r2, [r3, #20]

    /* Set PD0 and PD2 */
    GPIOD->BSRR = 0x00000005;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <main+0xa4>)
 800052c:	2205      	movs	r2, #5
 800052e:	611a      	str	r2, [r3, #16]
    /* Reset PD0 and PD2 */
    GPIOD->BRR  = 0x00000005;
 8000530:	4b02      	ldr	r3, [pc, #8]	; (800053c <main+0xa4>)
 8000532:	2205      	movs	r2, #5
 8000534:	615a      	str	r2, [r3, #20]
    GPIOD->BSRR = 0x00000005;
 8000536:	e7c2      	b.n	80004be <main+0x26>
 8000538:	2000001c 	.word	0x2000001c
 800053c:	40011400 	.word	0x40011400

08000540 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000540:	480d      	ldr	r0, [pc, #52]	; (8000578 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000542:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000544:	f7ff fe14 	bl	8000170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000548:	480c      	ldr	r0, [pc, #48]	; (800057c <LoopForever+0x6>)
  ldr r1, =_edata
 800054a:	490d      	ldr	r1, [pc, #52]	; (8000580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800054c:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <LoopForever+0xe>)
  movs r3, #0
 800054e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000550:	e002      	b.n	8000558 <LoopCopyDataInit>

08000552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000556:	3304      	adds	r3, #4

08000558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800055a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800055c:	d3f9      	bcc.n	8000552 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <LoopForever+0x16>)
  movs r3, #0
 8000562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000564:	e001      	b.n	800056a <LoopFillZerobss>

08000566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000568:	3204      	adds	r2, #4

0800056a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800056a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800056c:	d3fb      	bcc.n	8000566 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800056e:	f000 f811 	bl	8000594 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000572:	f7ff ff91 	bl	8000498 <main>

08000576 <LoopForever>:

LoopForever:
    b LoopForever
 8000576:	e7fe      	b.n	8000576 <LoopForever>
  ldr   r0, =_estack
 8000578:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800057c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000580:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000584:	080005fc 	.word	0x080005fc
  ldr r2, =_sbss
 8000588:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800058c:	20000020 	.word	0x20000020

08000590 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000590:	e7fe      	b.n	8000590 <ADC_IRQHandler>
	...

08000594 <__libc_init_array>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	2600      	movs	r6, #0
 8000598:	4d0c      	ldr	r5, [pc, #48]	; (80005cc <__libc_init_array+0x38>)
 800059a:	4c0d      	ldr	r4, [pc, #52]	; (80005d0 <__libc_init_array+0x3c>)
 800059c:	1b64      	subs	r4, r4, r5
 800059e:	10a4      	asrs	r4, r4, #2
 80005a0:	42a6      	cmp	r6, r4
 80005a2:	d109      	bne.n	80005b8 <__libc_init_array+0x24>
 80005a4:	f000 f81a 	bl	80005dc <_init>
 80005a8:	2600      	movs	r6, #0
 80005aa:	4d0a      	ldr	r5, [pc, #40]	; (80005d4 <__libc_init_array+0x40>)
 80005ac:	4c0a      	ldr	r4, [pc, #40]	; (80005d8 <__libc_init_array+0x44>)
 80005ae:	1b64      	subs	r4, r4, r5
 80005b0:	10a4      	asrs	r4, r4, #2
 80005b2:	42a6      	cmp	r6, r4
 80005b4:	d105      	bne.n	80005c2 <__libc_init_array+0x2e>
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80005bc:	4798      	blx	r3
 80005be:	3601      	adds	r6, #1
 80005c0:	e7ee      	b.n	80005a0 <__libc_init_array+0xc>
 80005c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80005c6:	4798      	blx	r3
 80005c8:	3601      	adds	r6, #1
 80005ca:	e7f2      	b.n	80005b2 <__libc_init_array+0x1e>
 80005cc:	080005f4 	.word	0x080005f4
 80005d0:	080005f4 	.word	0x080005f4
 80005d4:	080005f4 	.word	0x080005f4
 80005d8:	080005f8 	.word	0x080005f8

080005dc <_init>:
 80005dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005de:	bf00      	nop
 80005e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005e2:	bc08      	pop	{r3}
 80005e4:	469e      	mov	lr, r3
 80005e6:	4770      	bx	lr

080005e8 <_fini>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr
